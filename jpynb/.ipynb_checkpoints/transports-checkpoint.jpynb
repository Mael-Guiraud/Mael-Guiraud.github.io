{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 88,
   "id": "0c00f8e2",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "from scipy.sparse import csr_matrix\n",
    "from scipy.sparse.csgraph import dijkstra\n",
    "class Env:\n",
    "   \n",
    "    def __init__(self, N,size_Trucks):\n",
    "        self.N = N\n",
    "        self.size_Trucks = size_Trucks\n",
    "        self.matrix = np.random.randint(1,70,(N,N))\n",
    "        self.matrix = np.tril(self.matrix) + np.tril(self.matrix, -1).T\n",
    "        self.matrix = np.tril(self.matrix,-1) + np.triu(self.matrix,1)\n",
    "        self.trucks = np.zeros((N,N))\n",
    "        \n",
    "    def Price(self):\n",
    "        return np.sum(self.matrix * self.trucks%self.size_Trucks)\n",
    "    def Cheapest_path(self,origin,destination):\n",
    "        return\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "id": "3060097b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[ 0 65 27 38]\n",
      " [65  0  4 51]\n",
      " [27  4  0  6]\n",
      " [38 51  6  0]]\n",
      "  (1, 0)\t65\n",
      "  (2, 0)\t27\n",
      "  (2, 1)\t4\n",
      "  (3, 0)\t38\n",
      "  (3, 1)\t51\n",
      "  (3, 2)\t6\n"
     ]
    }
   ],
   "source": [
    "x = Env(4)\n",
    "print(x.matrix)\n",
    "graph = csr_matrix(np.tril(x.matrix))\n",
    "print(graph)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "id": "8624822a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 0., 31., 27., 33.])"
      ]
     },
     "execution_count": 95,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dist_matrix, predecessors = dijkstra(csgraph=graph, directed=False, indices=0, return_predecessors=True)\n",
    "dist_matrix"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "id": "abb37472",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[-9999,     0,     0,     0],\n",
       "       [    1, -9999,     1,     1],\n",
       "       [    2,     2, -9999,     2],\n",
       "       [    3,     3,     3, -9999]])"
      ]
     },
     "execution_count": 83,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "predecessors"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "110957bd",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "93b01c3e",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
